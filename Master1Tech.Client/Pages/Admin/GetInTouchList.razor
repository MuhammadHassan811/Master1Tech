@page "/getintouch-list/{Page:int}"
@inject Services.IGetInTouchServiceEndpoint GetInTouchService
@inject Services.IUserService UserService
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Master1Tech.Client.Shared.PageHistoryState PageHistoryState

<h1>Get In Touch</h1>
<br />

<div class="row mb-3">
   @*  <div class="col-md-7">
        @if (LoggedIn)
        {
            <NavLink href="/getintouch/create" class="btn btn-sm btn-success mb-2">Add Record</NavLink>
        }
    </div> *@
    <div class="input-group col-md-5 text-md-right">
        <input name="SearchInput" type="text" class="form-control" placeholder="Full Name or Email"
               @bind="SearchTerm" @onkeyup="SearchBoxKeyPress" />
        <div class="input-group-btn">
            <button name="SearchButton" class="btn btn-default" @onclick="SearchClick">
                <i class="oi oi-magnifying-glass" title="search" aria-hidden="true"></i>
            </button>
        </div>
        <div class="input-group-btn">
            <button name="SearchClear" class="btn btn-default" @onclick="ClearSearch">
                <i class="oi oi-x" title="clear" aria-hidden="true"></i>
            </button>
        </div>
    </div>
</div>

@if (records == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th style="width:20%">Full Name</th>
                <th style="width:20%">Email</th>
                <th style="width:15%">Phone</th>
                <th style="width:15%">Company</th>
                <th style="width:15%">Job Title</th>
                <th style="width:15%">Status</th>
                <th style="width:5%"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in records.Results)
            {
                <tr>
                    <td>@item.FullName</td>
                    <td>@item.Email</td>
                    <td>@item.PhoneNo</td>
                    <td>@item.CompanyName</td>
                    <td>@item.JobTitle</td>
                    <td>@(item.Status ? "Active" : "Inactive")</td>
                    <td style="white-space: nowrap">
                        <NavLink href="@($"/getintouch/view/{item.Id}")" class="oi oi-eye text-primary mr-3 nounderline"></NavLink>
                        @* @if (LoggedIn)
                        {
                            <NavLink href="@($"/getintouch/update/{item.Id}")" class="oi oi-pencil text-warning mr-2 nounderline"></NavLink>
 *@
                            @* @if (item.IsDeleting)
                            {
                                <button @onclick="@(() => DeleteRecord(item))" disabled class="btn btn-link oi oi-trash text-danger mr-1 nounderline">
                                    <span class="spinner-border spinner-border-sm"></span>
                                </button>
                            }
                            else
                            { 
                                <button @onclick="@(() => DeleteRecord(item))" class="btn btn-link oi oi-trash text-danger mr-1 nounderline"></button>
                           @*  } *@
                       @*  } *@
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Pager Result=@records PageChanged=PagerPageChanged />
}

@code {
    [Parameter] public int Page { get; set; } = 1;
    [Parameter] public string SearchTerm { get; set; } = string.Empty;

    protected PagedResult<GetInTouch> records;

    public bool LoggedIn => UserService.User != null;

    protected override void OnInitialized()
    {
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        records = await GetInTouchService.GetInTouchAsync(null, Page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
    }

    protected async Task SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
        {
            await SearchClick();
        }
    }

    protected async Task SearchClick()
    {
        if (string.IsNullOrEmpty(SearchTerm))
        {
            records = await GetInTouchService.GetInTouchAsync(null, Page);
            return;
        }
        records = await GetInTouchService.GetInTouchAsync(SearchTerm, Page);
        StateHasChanged();
    }

    protected async Task ClearSearch()
    {
        SearchTerm = string.Empty;
        records = await GetInTouchService.GetInTouchAsync(SearchTerm, Page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
        StateHasChanged();
    }

    protected void PagerPageChanged(int page)
    {
        UriHelper.NavigateTo($"/getintouch/{page}");
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
    }

    private async Task DeleteRecord(GetInTouch record)
    {
       // record.IsDeleting = true;
        await GetInTouchService.DeleteGetInTouch(record.Id);
        records = await GetInTouchService.GetInTouchAsync(null, Page);
        StateHasChanged();
    }
}
