@page "/companies/pakistan"
@using Master1Tech.Client.Extension
@using Master1Tech.DTOs.Company
@using Master1Tech.Models
@using Master1Tech.Services
@using Master1Tech.Shared.DTOs.Common
@using Master1Tech.Shared.DTOs.Industry
@using Master1Tech.Shared.DTOs.Service
@using Master1Tech.Shared.DTOs.Technology
@using Master1Tech.Shared.Extentions.Common
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@inject ICompanyService CompanyService
@inject IServiceServiceEndpoint ServiceService
@inject ITechnologyServiceEndpoint TechnologyService
@inject IIndustryServiceEndpoint IndustryService
@inject IJSRuntime JSRuntime
@inject IWebAssemblyHostEnvironment hostEnv

@if(!IsFilterOpen)
{
<section>
    <div class="container">
        <div class="d-flex flex-column flex-md-row-reverse gap-5">
            <div class="loc-intro__cov fsz-0 relative">
                
                <picture>
                    <source media="(max-width: 768px)" srcset="https://rest.techbehemoths.com/storage/images/countries/pakistan/Pakistan-country-6022b1f906761.webp">
                    <source media=" (min-width: 769px)" srcset="https://rest.techbehemoths.com/storage/images/countries/pakistan/Pakistan-country-6022b1f906761-x2.webp">
                    <source media="(max-width: 768px)" srcset="https://rest.techbehemoths.com/storage/images/countries/pakistan/Pakistan-country-6022b1f906761.jpg">
                    <source media=" (min-width: 769px)" srcset="https://rest.techbehemoths.com/storage/images/countries/pakistan/Pakistan-country-6022b1f906761-x2.jpg"> 
                        <img src="https://rest.techbehemoths.com/storage/images/countries/pakistan/Pakistan-country-6022b1f906761.jpg" alt="Pakistan Photo" width="300" height="300">
                </picture>
            </div>
            <div>
                <h1 class="loc-intro__title">There are <span class="txt-blue">@Companiees.TotalRowCount</span> Companies in <span class="txt-blue dashed">Pakistan</span><br>that cover <span class="txt-blue">@_services.Count()</span> Services &amp; Industries!</h1> 
                <div class="loc-intro__smry">
                    <p>Pakistan’s Information Technology (IT) sector has a promising future with its talented youth and is poised to become the largest export industry of the country, according to the Pakistani High Commissioner to the UK.&nbsp;</p>
                    <p>Based on this information, it is also important to mention that the average salary in the IT industry in Pakistan is estimated at around 378 USD/mo, making the country one of the most accessible and competitive in the region in terms of prices.</p>
                    <p>Discover top IT Companies in Pakistan specialized in web development, software development, web design, UI/UX design, digital marketing, branding and more.</p>
                </div>
            </div>
        </div>
    </div>
</section>
 }
@* <section class="light-background"> *@
    <div class="container">
         
        <CompaniesFilters OnClickFilter="ApplyFilters" OnFilterClear="LoadCompanies" OnFilterToggle="HandleFilterToggle"/>

        @if(!IsFilterOpen)
{
        <!-- Header Section -->
        <h2 class="mb-4">
            Explore Top Companies in <span style="color: #007bff;">@Country.ToUpper()</span>
        </h2>

        <!-- Company Count and Last Updated -->
        <div class="d-flex justify-content-between mb-4">
            <div class="d-flex flex-column">
                <h5 class="font-weight-bold">We found <strong style="color:var(--accent-color)">@CompanyCount </strong> companies</h5>
                <p class="pt-2">That's a hell of a search to do now. Why not use the smart filters above?</p>
            </div>
            
            <div class="float-right text-uppercase mt-2" style="letter-spacing: .1em;"> LAST UPDATED IN: <strong class="font-weight-bold" style="color:var(--accent-color)"> AUGUST, 2025</strong> </div>
        </div>

        <!-- Companies Grid -->
        @if (IsLoading)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <div class="row comapny-cards">
                @foreach (var company in Companiees.Results)
                {
                    string logoUrl = $"company/{company.Slug}.png";
                    <div class="col-12 col-lg-4 mb-4">
                        <div class="card h-100">
                            <div class="card-body">
                                <div class="d-flex gap-3 align-items-center">
                                    <figure class="company-img figure">
                                        <a href="@($"/companyprofile/{company.Slug}")" target="_self" title="@company.Name" aria-label="@company.Name">
                                            <picture class="s-imag loaded">
                                                <img src="@(string.IsNullOrEmpty(logoUrl) ? "https://img.freepik.com/free-vector/illustration-gallery-icon_53876-27002.jpg" : logoUrl)" alt="@company.LogoText" height="110" width="110" />
                                            </picture>
                                        </a>
                                    </figure>
                                    <div class="company-info d-flex flex-column gap-1">
                                        <a href="@($"/companyprofile/{company.Slug}")" aria-label="@company.Name Company Profile Page" target="_self" class="d-flex gap-2">
                                            @company.Name
                                            @if (company.IsVerified)
                                            {
                                                <i class="bi bi-patch-check-fill txt-blue"></i>
                                            }
                                        </a>
                                        @if (!string.IsNullOrEmpty(company.Location))
                                        {
                                            <p>
                                                    <span class="text-muted"><i class="bi bi-geo-alt txt-blue"></i> @company.Location</span>
                                            </p>
                                        }
                                        @if (!string.IsNullOrEmpty(company.Headquarter))
                                        {
                                            <p>
                                                    <span class="text-muted"><i class="bi bi-building txt-blue"></i> @company.Headquarter</span>
                                            </p>
                                        }
                                        
                                    </div>
                                </div>
                                
                                <!-- Rating -->
                                @* <div class="text-end mb-2">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= company.Rating)
                                        {
                                            <span class="text-warning">&#9733;</span> <!-- Filled star -->
                                        }
                                        else
                                        {
                                            <span class="text-secondary">&#9734;</span> <!-- Empty star -->
                                        }
                                    }
                                </div> *@

                                <!-- Description -->
                                <p class="company-des">@company.Description?.TruncateWithEllipsis(100)</p>

                                <!-- Team Size and Hourly Rate -->
                                <div class="row mb-3">
                                    <div class="col-6">
                                         <div class="card-box d-flex justify-center flex-column gap-2 ">
                                            <span class="title">Number of Employees</span>
                                            <span class="value txt-blue"> @company.TeamSize</span>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="card-box d-flex justify-center flex-column gap-2 ">
                                            <span class="title">Hourly Rate</span>
                                            <span class="value txt-blue">@company.HourlyRate</span>
                                        </div>
                                    </div>
                                   
                                    
                                </div>
                                 
                                <!-- Services -->
                                @* <small class="text-muted mb-1 d-block">Services</small>
                                <div class="row mb-3">
                                    @foreach (var service in company.Services.Take(3))
                                    {
                                        <div class="col-12">
                                            <span class="badge bg-info text-dark me-1">@service</span>
                                        </div>
                                    }
                                    @if (company.Services.Count > 3)
                                    {
                                        <div class="col-12">
                                            <small style="color: #007bff; cursor: pointer;">+ See more</small>
                                        </div>
                                    }
                                </div> *@
                            </div>

                            <!-- Action Buttons -->
                            <div class="card-footer bg-white border-top-0 d-flex justify-content-between p-3">
                                <NavLink class="btn btn-outline-dark rounded-0" href="@($"/companyprofile/{company.Slug}")">
                                    View profile
                                </NavLink>
                                <NavLink class="btn btn-link" href="@($"/contact/{company.Id}")">
                                    Get In Touch
                                </NavLink>
                       
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

      @*   <!-- Load More Button -->
        @if (Companiees.Results.Count > 0)
        {
            <div class="text-center mt-4">
                <button class="btn btn-primary" @onclick="LoadMoreCompanies">
                    Load More Companies
                </button>
            </div>
        } *@
         
        <div class="d-flex justify-content-center mt-4">
            <nav aria-label="Page navigation">
                <ul class="pagination">

                    <!-- Previous Arrow -->
                    <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="() => GoToPage(CurrentPage - 1)" aria-label="Previous">
                            <span>&#x276E;</span> <!-- Left arrow -->
                        </button>
                    </li>

                    <!-- Page Numbers -->
                    @for (int i = 1; i <= TotalPages; i++)
                    {
                        int page = i;
                        if (i == 1 || i == TotalPages || Math.Abs(CurrentPage - i) <= 2)
                        {
                            <li class="page-item @(i == CurrentPage ? "active" : "")">
                                <button class="page-link" @onclick="() => GoToPage(page)">@i</button>
                            </li>
                        }
                        else if (i == CurrentPage - 3 || i == CurrentPage + 3)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                    }

                    <!-- Next Arrow -->
                    <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="() => GoToPage(CurrentPage + 1)" aria-label="Next">
                            <span>&#x276F;</span> <!-- Right arrow -->
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
        <footer class="app-footer mt-5">
            <div class="quote-banner text-center">
                <h2>Submit your project and get free quotes in 1-hour</h2>
                <a href="/contact" class="btn btn-primary btn-lg mt-3">Start now!</a>
                <p class="banner-subtext mt-3">
                    Handpicked companies &bull; No obligation to hire &bull; 100% risk-free
                </p>
            </div>
        </footer>
        }
    </div>

@* </section>

 *@

@code {
    [Parameter] public string Country { get; set; } = "pakistan";

    private PagedResult<CompanyDto> Companiees = new();
    private List<ServiceSummaryDto> _services = new();
    private List<TechnologySummaryDto> _technologies = new();
    private List<IndustryDto> _industries = new();

    private List<FoundedYearDto> _foundedYears = CommonExt.GetFoundedYears();


    private CompanyFilter companyFilter = new();
    private int CompanyCount = 0;
    private bool IsLoading = false;
    private bool IsFilterOpen = false;
    private int PageSize = 12;

    private int _maximumSelectedOptions = 25;
    private int _maximumServiceSelectedOptions = 25;
    private int _maximumIndustrySelectedOptions = 25;
    private int _maximumTechnologySelectedOptions = 25;
    private int _maximumFoundedYearsSelectedOptions = 25;
    private string _selectedSortByValue = "Name";


    protected override async Task OnInitializedAsync()
    {
        await LoadCompanies();
        await LoadServices();
        await LoadTechnologies();
        await LoadIndustries();
    }

    private void HandleFilterToggle (bool isOpen)
    {

        IsFilterOpen = isOpen;

        StateHasChanged();
    }

    private async Task LoadServices()
    {
        try
        {
            _services = await ServiceService.GetAllServicesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading services: {ex.Message}");
        }
    }

    private async Task LoadCompanies(bool isClearFilter = false)
    {
        IsLoading = true;
        StateHasChanged();

        try
        {
            if (isClearFilter)
            {
                companyFilter = new();
                companyFilter.SortBy = _selectedSortByValue;
            }
            
            var pagedResult = await CompanyService.GenerateSampleCompanies(
                companyFilter,
                CurrentPage,
                PageSize
            );

            Companiees = pagedResult;
            CompanyCount = Companiees.RowCount;
            TotalPages = Companiees.PageCount;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading companies: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadTechnologies()
    {
        try
        {
            _technologies = await TechnologyService.GetAllTechnologiesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading technologies: {ex.Message}");
        }
    }
    private async Task LoadIndustries()
    {
        try
        {
            _industries = await IndustryService.GetAllIndustryAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading industries: {ex.Message}");
        }
    }


    private async Task ApplyFilters(CompanyFilter company)
    {
        companyFilter = company;
        await LoadCompanies();
    } 



    private async Task ResetFilters()
    {
        SelectedFoundedYearServiceItems = Array.Empty<FoundedYearDto>();
        SelectedIndustryServiceItems = Array.Empty<IndustryDto>();
        SelectedTechnologyServiceItems = Array.Empty<TechnologySummaryDto>();
        SelectedServiceItems = Array.Empty<ServiceSummaryDto>();
        _selectedSortByValue = "Name";
        await LoadCompanies(true);
    }



    private async Task LoadMoreCompanies()
    {   int page = CurrentPage + 1;
        if (page >= 1 && page <= TotalPages)
        {
            CurrentPage = page;
            await LoadCompanies();
        }
    }

    int CurrentPage = 1;
    int TotalPages = 45;

    private async void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            CurrentPage = page;
            await LoadCompanies();
        }
    }


    IEnumerable<Company> SelectedItems = Array.Empty<Company>();
    IEnumerable<ServiceSummaryDto> SelectedServiceItems = Array.Empty<ServiceSummaryDto>();
    IEnumerable<TechnologySummaryDto> SelectedTechnologyServiceItems = Array.Empty<TechnologySummaryDto>();
    IEnumerable<IndustryDto> SelectedIndustryServiceItems = Array.Empty<IndustryDto>();
    IEnumerable<FoundedYearDto> SelectedFoundedYearServiceItems = Array.Empty<FoundedYearDto>();

    private async Task OnServiceSearchAsync(OptionsSearchEventArgs<ServiceSummaryDto> e)
    {

        e.Items = _services.Where(i => i.Name.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase))
                              .OrderBy(i => i.Name);
        await Task.CompletedTask;
    }

    private async Task OnSearchTechnologyAsync(OptionsSearchEventArgs<TechnologySummaryDto> e)
    {

        e.Items = _technologies.Where(i => i.Name.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase))
                              .OrderBy(i => i.Name);
        await Task.CompletedTask;
    }
    private async Task OnSearchFoundedYearAsync(OptionsSearchEventArgs<FoundedYearDto> e)
    {

        e.Items = _foundedYears.Where(i => i.Year.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase))
                              .OrderBy(i => i.Year);
        await Task.CompletedTask;
    }

    private async Task OnSearchIndustryAsync(OptionsSearchEventArgs<IndustryDto> e)
    {

        e.Items = _industries.Where(i => i.Name.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase))
                              .OrderBy(i => i.Name);

        await Task.CompletedTask;
    }



    bool AutoHeight = true;
    
     
    SortByDto? SelectedSortBy;

    private List<SortByDto> SortBies = new()
    {        
        new SortByDto() {
            Name = "Name"
        },
        new SortByDto
        {
            Name = "Team Size"
        },
        new SortByDto()
        {
            Name = "Rating"
        },

        new SortByDto() {
            Name = "Featured"
        },

    };
}

  <style>
    .quote-banner {
        background: linear-gradient(to bottom, #d6e4ff, #eaf4ff);
        padding: 50px 20px;
    }

        .quote-banner h2 {
            font-size: 2rem;
            font-weight: bold;
            color: #000;
            margin-bottom: 20px;
        }

        .quote-banner .btn-primary {
            background-color: #1a73e8;
            border: none;
            padding: 12px 30px;
            font-size: 1rem;
            font-weight: 500;
            border-radius: 4px;
        }

            .quote-banner .btn-primary:hover {
                background-color: #155ab6;
            }

    .banner-subtext {
        font-size: 0.95rem;
        color: #333;
    }


      </style>