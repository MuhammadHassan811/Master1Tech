@page "/companies/pakistan"
@using Master1Tech.Models
@using Master1Tech.Services
@inject ICompanyService CompanyService
@inject IJSRuntime JSRuntime

<h3>Top Companies in @Country.ToUpper()</h3>

<div class="filter-bar">
    <div class="filter-group">
        <div class="filter-item">
            <span>Location <b>(@(!string.IsNullOrEmpty(companyFilter.Location) ? "1" : "0"))</b></span>
            <select @bind="companyFilter.Location">
                <option value="">All</option>
                <option value="Lahore">Lahore</option>
                <option value="Karachi">Karachi</option>
                <option value="Rawalpindi">Rawalpindi</option>
                <option value="Okara">Okara</option>
            </select>
        </div>

        <div class="filter-item">
            <span>Services</span>
            <select @bind="companyFilter.Services">
                <option value="">All</option>
                <option value="Web Development">Web Development</option>
                <option value="Mobile App Development">Mobile App Development</option>
                <option value="Custom Software Development">Custom Software Development</option>
            </select>
        </div>

        <div class="filter-item active">
            <span>Team size</span>
            <select @bind="companyFilter.TeamSize">
                <option value="">All</option>
                <option value="10-49">10-49</option>
                <option value="50-249">50-249</option>
                <option value="250-999">250-999</option>
            </select>
        </div>

        <div class="filter-item">
            <span>Hourly rate</span>
            <select @bind="companyFilter.HourlyRate">
                <option value="">All</option>
                <option value="0-49">0-49</option>
                <option value="50-99">50-99</option>
            </select>
        </div>

        <div class="filter-item sort">
            <span>Sort by</span>
            <select @bind="companyFilter.SortBy">
                <option value="Featured">Featured</option>
                <option value="Name">Name</option>
                <option value="Rating">Rating</option>
                <option value="Team Size">Team Size</option>
            </select>
        </div>

        <button @onclick="ApplyFilters" class="btn-filter">Filter</button>
    </div>
</div>

<!-- Header Section -->
<h4 class="mb-4">
    Explore Top Companies in <span style="color: #007bff;">@Country.ToUpper()</span>
</h4>

<!-- Company Count and Last Updated -->
<div class="p-4 mb-4" style="background-color: #f8f9fa;">
    <p>We found <strong>@CompanyCount companies</strong>.</p>
    <p class="text-muted">That's a hell of a search to do now. Why not use the smart filters above?</p>
    <small class="float-right text-muted">LAST UPDATED IN: JULY, 2025</small>
</div>

<!-- Companies Grid -->
@if (IsLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="row">
        @foreach (var company in Companiees.Results)
        {
            <div class="col-12 col-sm-6 col-md-4 mb-4">
                <div class="card h-100">
                    <div class="card-body">

                        <!-- Company Header -->
                        <div class="row align-items-center mb-2">
                            <div class="col-3 text-center">
                                <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center" style="width: 50px; height: 50px;">
                                    <strong>@company.Name.Substring(0, 1)</strong>
                                </div>
                            </div>
                            <div class="col-9">
                                <h6 class="mb-0">
                                    @company.Name
                                    @if (company.IsVerified)
                                    {
                                        <span title="Verified" class="text-success">&#10004;</span>
                                    }
                                </h6>
                                <small class="text-muted">&#x1F4CD; @company.Location</small>
                            </div>
                        </div>

                        <!-- Rating -->
                        <div class="mb-2">
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= company.Rating)
                                {
                                    <span class="text-warning">&#9733;</span> <!-- Filled star -->
                                }
                                else
                                {
                                    <span class="text-secondary">&#9734;</span> <!-- Empty star -->
                                }
                            }
                        </div>

                        <!-- Description -->
                        <p class="text-muted">@company.Description</p>

                        <!-- Team Size and Hourly Rate -->
                        <div class="row mb-3">
                            <div class="col-6">
                                <small class="text-muted">Team size</small>
                                <div style="color: #007bff;">@company.TeamSize</div>
                            </div>
                            <div class="col-6">
                                <small class="text-muted">Hourly Rate</small>
                                <div style="color: #007bff;">@company.HourlyRate</div>
                            </div>
                        </div>

                        <!-- Services -->
                        @* <small class="text-muted mb-1 d-block">Services</small>
                        <div class="row mb-3">
                            @foreach (var service in company.Services.Take(3))
                            {
                                <div class="col-12">
                                    <span class="badge bg-info text-dark me-1">@service</span>
                                </div>
                            }
                            @if (company.Services.Count > 3)
                            {
                                <div class="col-12">
                                    <small style="color: #007bff; cursor: pointer;">+ See more</small>
                                </div>
                            }
                        </div> *@
                    </div>

                    <!-- Action Buttons -->
                    <div class="card-footer bg-white border-top-0 d-flex justify-content-between">
                        <NavLink class="btn btn-outline-primary btn-sm" href="@($"/companyprofile/{company.Id}")">
                            View profile
                        </NavLink>
                        <NavLink class="btn btn-outline-primary btn-sm" href="/contact">
                            Get In Touch
                        </NavLink>
                       
                    </div>
                </div>
            </div>
        }
    </div>
}

<!-- Load More Button -->
@if (Companiees.Results.Count > 0)
{
    <div class="text-center mt-4">
        <button class="btn btn-primary" @onclick="LoadMoreCompanies">
            Load More Companies
        </button>
    </div>
}

@* @if (IsLoading)
{
    <p>Loading companies...</p>
}
else if (Companiees?.Any() == true)
{
    <p>Showing @CompanyCount companies</p>
    <ul>
        @foreach (var company in Companiees)
        {
            <li>@company.Name</li>
        }
    </ul>
}
else
{
    <p>No companies found.</p>
} *@

<div class="d-flex justify-content-center mt-4">
    <nav>
        <ul class="pagination pagination-sm">

            <!-- Previous Arrow -->
            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(CurrentPage - 1)" aria-label="Previous">
                    <span>&#x276E;</span> <!-- Left arrow -->
                </button>
            </li>

            <!-- Page Numbers -->
            @for (int i = 1; i <= TotalPages; i++)
            {
                if (i == 1 || i == TotalPages || Math.Abs(CurrentPage - i) <= 2)
                {
                    <li class="page-item @(i == CurrentPage ? "active" : "")">
                        <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                    </li>
                }
                else if (i == CurrentPage - 3 || i == CurrentPage + 3)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
            }

            <!-- Next Arrow -->
            <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(CurrentPage + 1)" aria-label="Next">
                    <span>&#x276F;</span> <!-- Right arrow -->
                </button>
            </li>
        </ul>
    </nav>
</div>

@code {
    [Parameter] public string Country { get; set; } = "pakistan";

    private PagedResult<Company> Companiees = new();
    private CompanyFilter companyFilter = new();
    private int CompanyCount = 0;
    private bool IsLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCompanies();
    }

    private async Task LoadCompanies()
    {
        IsLoading = true;
        StateHasChanged();

        try
        {
            var pagedResult= await CompanyService.GenerateSampleCompanies();
            Companiees = pagedResult;
            //CompanyCount = await CompanyService.GetTotalCompaniesAsync(companyFilter);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading companies: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task ApplyFilters()
    {
        await LoadCompanies();
    }

    private async Task LoadMoreCompanies()
    {
        // Simulate loading more companies
        await Task.Delay(500);
        // In a real application, you would fetch more companies from the API
    }

    int CurrentPage = 1;
    int TotalPages = 45;

    void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            CurrentPage = page;
            // Call your data-fetching logic here
        }
    }
}
