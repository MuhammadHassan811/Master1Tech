@page "/contact"
@using Master1Tech.Client.Extension
@using Master1Tech.DTOs.Company
@using Master1Tech.Models
@using Master1Tech.Services
@using Master1Tech.Shared.DTOs.Common
@using Master1Tech.Shared.DTOs.Service
@using Microsoft.AspNetCore.Components.Forms
@inject IAlertService AlertService
@inject IServiceServiceEndpoint ServiceService
@inject HttpClient Http

<div class="contact-container">
    <div class="contact-form">
        <h2>Collaborate with Pakistan’s Leading IT Companies</h2>

        <div class="info-banner">
            <span>Unlock unmatched expertise, cost-effective innovation, and seamless partnerships with Pakistan’s top IT leaders empowering your business to thrive globally.</span>
        </div>
        @if (showSuccessMessage)
        {
            <div class="alert alert-success">
                <p>✓ Your request has been submitted successfully! Our experts will connect you with Pakistan's elite IT companies within 24 hours.</p>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                <p>❌ @errorMessage</p>
            </div>
        }
        <EditForm Model="@contactModel" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator />
             <ValidationSummary class="text-danger" />
            <div class="form-row">
                <div class="form-group">
                    <label for="fullName">Your Full Name</label>
                    <InputText @bind-Value="contactModel.FullName" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="email">Your Email Address</label>
                    <InputText @bind-Value="contactModel.Email" class="form-control" type="email" />
                    <ValidationMessage For="@(() => contactModel.Email)" class="text-danger"/>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="phoneNumber">Phone Number</label>
                    <InputText @bind-Value="contactModel.PhoneNo" class="form-control" />
                    <ValidationMessage For="@(() => contactModel.PhoneNo)" class="text-danger" />
                </div>
                <div class="form-group">
                    <label for="companyName">Company Name</label>
                    <InputText @bind-Value="contactModel.CompanyName" class="form-control" />
                </div>
            </div>

            <div class="form-group">
                <label for="jobTitle">Job Title</label>
                <InputText @bind-Value="contactModel.JobTitle" class="form-control" />
            </div>


            <div class="form-group">
                <label for="service">Project Type</label>
                <InputSelect @bind-Value="contactModel.Service" class="form-control">
                    <option value="">Choose a service...</option>
                    @if (_services != null && _services.Any())
                    {
                        @foreach (var service in _services)
                        {
                            <option value="@service.ServiceID">@service.Name</option>
                        }
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label for="description">
                    Project Details
                </label>
                <InputTextArea @bind-Value="contactModel.ProjectDescription" class="form-control textarea" rows="8" />
           <ValidationMessage For="@(() => contactModel.ProjectDescription)" class="text-danger"  />

            </div>

            <div class="checkbox-group">
                <label class="checkbox-label">
                    <InputCheckbox @bind-Value="contactModel.GetVettedCompanies" />
                    <span class="checkmark"></span>
                    Yes, I want to get access to vetted companies that match my needs (highly recommended)
                </label>
            </div>
            <div class="form-group">
                <label for="description">Attach Relevant Files (Optional: Word, Excel, PDF)</label>
                <InputFile OnChange="HandleFileSelected" accept=".doc,.docx,.xls,.xlsx,.pdf" />
                @if (selectedFile != null)
                {
                    <small class="text-info">Selected: @selectedFile.Name (@(selectedFile.Size / 1024)KB)</small>
                }

                @if (!string.IsNullOrEmpty(fileMessage))
                {
                    <small class="text-info">@fileMessage</small>
                }
               

            </div>
            <button type="submit" class="btn-submit" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span>Processing...</span>
                }
                else
                {
                    <span>Launch Your Partnership</span>
                }
            </button>
            <p>
                Our experts will connect you with Pakistan’s elite IT companies within 24 hours, let’s transform your vision into reality.
            </p>
        </EditForm>
    </div>
</div>

@code {
    private List<ServiceSummaryDto> _services = new();
    IEnumerable<ServiceSummaryDto> SelectedServiceItems = Array.Empty<ServiceSummaryDto>();
    private GetInTouch contactModel = new();
    private string? message;

    private IBrowserFile? selectedFile;
    private string? fileMessage;
    private string? errorMessage;
    private bool showSuccessMessage = false;
    private bool isSubmitting = false;


    private async Task HandleSubmit()
    {
        if (isSubmitting) return;

        try
        {
            isSubmitting = true;
            errorMessage = null;
            showSuccessMessage = false;
            StateHasChanged();

            using var content = new MultipartFormDataContent();

            // Add form data
            content.Add(new StringContent(contactModel.FullName ?? ""), "FullName");
            content.Add(new StringContent(contactModel.Email ?? ""), "Email");
            content.Add(new StringContent(contactModel.PhoneNo ?? ""), "PhoneNo");
            content.Add(new StringContent(contactModel.CompanyName ?? ""), "CompanyName");
            content.Add(new StringContent(contactModel.JobTitle ?? ""), "JobTitle");
            content.Add(new StringContent(contactModel.Service.ToString() ?? ""), "Service");
            content.Add(new StringContent(contactModel.ProjectDescription ?? ""), "ProjectDescription");
            content.Add(new StringContent(contactModel.GetVettedCompanies.ToString()), "GetVettedCompanies");

            // Add file if selected
            if (selectedFile != null)
            {
                var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 10_000_000));
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
                content.Add(fileContent, "AttachmentFile", selectedFile.Name);
            }

            var response = await Http.PostAsync("api/getintouch/submit", content);

            if (response.IsSuccessStatusCode)
            {
                showSuccessMessage = true;
                // Reset form
                contactModel = new GetInTouch();
                selectedFile = null;
                fileMessage = null;
                AlertService.Success("Form added successfully", keepAfterRouteChange: true);
                // Scroll to top to show success message
                //await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var errorObj = System.Text.Json.JsonSerializer.Deserialize<dynamic>(errorContent);
                    errorMessage = errorObj?.GetProperty("message").GetString() ?? "An error occurred while submitting the form.";
                }
                catch
                {
                    errorMessage = "An error occurred while submitting the form.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Network error occurred. Please check your connection and try again.";
            Console.WriteLine($"Form submission error: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        if (selectedFile != null)
        {
            // Validate file size
            if (selectedFile.Size > 10_000_000) // 10 MB
            {
                fileMessage = "File size cannot exceed 10 MB";
                selectedFile = null;
                return;
            }

            // Validate file type
            var allowedExtensions = new[] { ".doc", ".docx", ".xls", ".xlsx", ".pdf" };
            var fileExtension = Path.GetExtension(selectedFile.Name).ToLowerInvariant();

            if (!allowedExtensions.Contains(fileExtension))
            {
                fileMessage = "Only Word, Excel, and PDF files are allowed";
                selectedFile = null;
                return;
            }

            fileMessage = $"File selected: {selectedFile.Name} ({selectedFile.Size / 1024:F1} KB)";
        }
        else
        {
            fileMessage = null;
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadServices();
    }

    private async Task LoadServices()
    {
        try
        {
            _services = await ServiceService.GetAllServicesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading services: {ex.Message}");
        }
    }

}

<style>
    .contact-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 0 1rem;
    }

    .contact-form {
        background-color: #f8f9fa;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

        .contact-form h2 {
            color: #333;
            margin-bottom: 1.5rem;
            font-size: 1.8rem;
            font-weight: 600;
        }

    .info-banner {
        background-color: #e3f2fd;
        border: 1px solid #2196f3;
        border-radius: 6px;
        padding: 1rem;
        margin-bottom: 2rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .info-icon {
        font-size: 1.2rem;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: #555;
            font-weight: 500;
        }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }

        .form-control:focus {
            outline: none;
            border-color: #4285f4;
            box-shadow: 0 0 0 2px rgba(66, 133, 244, 0.2);
        }

    .textarea {
        resize: vertical;
        min-height: 120px;
    }

    .checkbox-group {
        margin: 1.5rem 0;
    }

    .checkbox-label {
        display: flex;
        align-items: flex-start;
        gap: 0.5rem;
        cursor: pointer;
        color: #555;
        line-height: 1.4;
    }

    .btn-submit {
        background-color: #4285f4;
        color: white;
        padding: 0.75rem 2rem;
        border: none;
        border-radius: 6px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-submit:hover {
            background-color: #3367d6;
        }

        .btn-submit:active {
            transform: translateY(1px);
        }

    @@media (max-width: 768px) {
        .form-row

    {
        grid-template-columns: 1fr;
    }

    .contact-form {
        padding: 1rem;
    }

    }
</style>