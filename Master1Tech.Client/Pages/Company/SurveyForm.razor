@page "/surveyform"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="registration-container">
    <div class="registration-form">
        <h2 class="text-center mb-4">Join Master1Tech: Make Pakistan the Hub of IT</h2>

        <div class="intro-banner">
            <p>Master1Tech, led by our US-based executives and CEO with over 30 and 40 years of experience from top global companies, is uniting all IT companies in Pakistan to scale up and position Pakistan as the multi-billion dollar Hub of IT. In partnership with PSEB, we're connecting you with Fortune 1000 and 2000 clients in the US, UK, Canada, and beyond. It's time to do big things! Share your company details, including a contact number, so we can reach out for exciting project opportunities. Complete this 2-minute survey to be featured for free and showcase your expertise to the world.</p>
        </div>

        @if (showSuccessMessage)
        {
            <div class="alert alert-success">
                <p>✓ Thank you for joining the Master1Tech IT Alliance! We'll review your details and contact you for project opportunities.</p>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                <p>❌ @errorMessage</p>
            </div>
        }

        <EditForm Model="@companyModel" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="form-group">
                <label for="companyName">Company Name</label>
                <InputText @bind-Value="companyModel.CompanyName" class="form-control" placeholder="e.g., Systems Limited" />
                <ValidationMessage For="@(() => companyModel.CompanyName)" class="text-danger" />
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="email">Contact Email</label>
                    <InputText @bind-Value="companyModel.Email" class="form-control" type="email" placeholder="e.g., info@company.com" />
                    <ValidationMessage For="@(() => companyModel.Email)" class="text-danger" />
                </div>
                <div class="form-group">
                    <label for="phone">Contact Phone Number</label>
                    <InputText @bind-Value="companyModel.Phone" class="form-control" placeholder="e.g., +92 300 1234567" />
                    <ValidationMessage For="@(() => companyModel.Phone)" class="text-danger" />
                </div>
            </div>

            <div class="form-group">
                <label for="primaryService">Primary IT Service</label>
                <InputSelect @bind-Value="companyModel.PrimaryService" class="form-control">
                    <option value="">Select a service...</option>
                    <option value="Software Development">Software Development</option>
                    <option value="Cybersecurity">Cybersecurity</option>
                    <option value="AI/Machine Learning">AI/Machine Learning</option>
                    <option value="Cloud Computing">Cloud Computing</option>
                    <option value="Web Development">Web Development</option>
                    <option value="Mobile App Development">Mobile App Development</option>
                    <option value="IT Consulting">IT Consulting</option>
                    <option value="Data Analytics">Data Analytics</option>
                    <option value="Blockchain">Blockchain</option>
                    <option value="DevOps">DevOps</option>
                    <option value="ERP/CRM Solutions">ERP/CRM Solutions</option>
                    <option value="IoT Solutions">IoT Solutions</option>
                    <option value="Quality Assurance/Testing">Quality Assurance/Testing</option>
                    <option value="Other">Other</option>
                </InputSelect>
                <ValidationMessage For="@(() => companyModel.PrimaryService)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="website">Website (Optional)</label>
                <InputText @bind-Value="companyModel.Website" class="form-control" type="url" placeholder="e.g., https://www.company.com" />
            </div>

            <div class="form-group">
                <label for="feature">Feature on Master1Tech?</label>
                <InputSelect @bind-Value="companyModel.FeatureOnSite" class="form-control">
                    <option value="Yes">Yes, feature my company for free</option>
                    <option value="No">No, not at this time</option>
                </InputSelect>
                <small class="form-text text-muted">Select "Yes" to join our alliance and connect with global clients at no cost.</small>
                <ValidationMessage For="@(() => companyModel.FeatureOnSite)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="comments">Additional Comments (Optional)</label>
                <InputTextArea @bind-Value="companyModel.Comments" class="form-control textarea" rows="3" placeholder="Share specific project interests or questions" />
            </div>

            <div class="text-center">
                <button type="submit" class="btn-submit" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span>Processing...</span>
                    }
                    else
                    {
                        <span>Submit & Join the IT Alliance</span>
                    }
                </button>
            </div>
        </EditForm>

        <p class="text-center mt-3">
            Questions? Contact us at <a href="mailto:support@master1tech.com">support@master1tech.com</a>
        </p>
    </div>
</div>

@code {
    private CompanyRegistrationModel companyModel = new();
    private string? errorMessage;
    private bool showSuccessMessage = false;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        // Pre-fill form with API data if company ID is provided in URL
        await LoadCompanyDataFromUrl();
    }

    private async Task LoadCompanyDataFromUrl()
    {
        try
        {
            var uri = new Uri(await JSRuntime.InvokeAsync<string>("eval", "window.location.href"));
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

            if (query.TryGetValue("company", out var companyId))
            {
                // Replace with your actual API endpoint
                var response = await Http.GetAsync($"api/companies/{companyId}");
                if (response.IsSuccessStatusCode)
                {
                    var data = await response.Content.ReadFromJsonAsync<CompanyData>();
                    if (data != null)
                    {
                        companyModel.CompanyName = data.Name ?? "";
                        companyModel.Email = data.Email ?? "";
                        companyModel.Phone = data.Phone ?? "";
                        companyModel.PrimaryService = data.Industry ?? "Software Development";
                        companyModel.Website = data.Website ?? "";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading company data: {ex.Message}");
        }
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting) return;

        try
        {
            isSubmitting = true;
            errorMessage = null;
            showSuccessMessage = false;
            StateHasChanged();

            // Replace with your actual API endpoint
            var response = await Http.PostAsJsonAsync("api/company-registration/submit", companyModel);

            if (response.IsSuccessStatusCode)
            {
                showSuccessMessage = true;
                // Reset form
                companyModel = new CompanyRegistrationModel();

                // Scroll to top to show success message
                await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var errorObj = System.Text.Json.JsonSerializer.Deserialize<ErrorResponse>(errorContent);
                    errorMessage = errorObj?.Message ?? "An error occurred while submitting the form.";
                }
                catch
                {
                    errorMessage = "An error occurred while submitting the form.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Network error occurred. Please check your connection and try again.";
            Console.WriteLine($"Form submission error: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    // Data Models
    public class CompanyRegistrationModel
    {
        [Required(ErrorMessage = "Company name is required")]
        [StringLength(100, ErrorMessage = "Company name cannot exceed 100 characters")]
        public string CompanyName { get; set; } = "";

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Phone number is required")]
        [Phone(ErrorMessage = "Please enter a valid phone number")]
        public string Phone { get; set; } = "";

        [Required(ErrorMessage = "Please select a primary service")]
        public string PrimaryService { get; set; } = "";

        [Url(ErrorMessage = "Please enter a valid website URL")]
        public string? Website { get; set; }

        [Required(ErrorMessage = "Please select if you want to be featured")]
        public string FeatureOnSite { get; set; } = "Yes";

        public string? Comments { get; set; }
    }

    public class CompanyData
    {
        public string? Name { get; set; }
        public string? Email { get; set; }
        public string? Phone { get; set; }
        public string? Industry { get; set; }
        public string? Website { get; set; }
    }

    public class ErrorResponse
    {
        public string? Message { get; set; }
    }
}

<style>
    .registration-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 0 1rem;
    }

    .registration-form {
        background-color: #f8f9fa;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

        .registration-form h2 {
            color: #333;
            margin-bottom: 1.5rem;
            font-size: 1.8rem;
            font-weight: 600;
        }

    .intro-banner {
        background-color: #e3f2fd;
        border: 1px solid #2196f3;
        border-radius: 6px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        font-size: 1.1rem;
        line-height: 1.6;
        color: #333;
    }

        .intro-banner p {
            margin: 0;
        }

    .alert {
        padding: 1rem;
        margin-bottom: 1.5rem;
        border-radius: 4px;
    }

    .alert-success {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }

    .alert-danger {
        background-color: #f8d7da;
        border: 1px solid #f1aeb5;
        color: #721c24;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: #555;
            font-weight: 500;
        }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }

        .form-control:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
        }

    .textarea {
        resize: vertical;
        min-height: 100px;
    }

    .form-text {
        font-size: 0.875rem;
        margin-top: 0.25rem;
        color: #6c757d;
    }

    .btn-submit {
        background-color: #007bff;
        color: white;
        padding: 0.75rem 2rem;
        border: none;
        border-radius: 6px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-submit:hover:not(:disabled) {
            background-color: #0056b3;
        }

        .btn-submit:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    .text-danger {
        color: #dc3545 !important;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .text-center {
        text-align: center;
    }

    .mt-3 {
        margin-top: 1rem;
    }

    .mb-4 {
        margin-bottom: 1.5rem;
    }

    @@media (max-width: 768px) {
        .form-row

    {
        grid-template-columns: 1fr;
    }

    .registration-form {
        padding: 1rem;
    }

        .registration-form h2 {
            font-size: 1.5rem;
        }

    .intro-banner {
        padding: 1rem;
        font-size: 1rem;
    }

    }
</style>