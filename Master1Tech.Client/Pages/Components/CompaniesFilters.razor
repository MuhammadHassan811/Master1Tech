@page "/filters"
@using Master1Tech.Models
@using Master1Tech.Shared.DTOs.Common
@using Master1Tech.Shared.DTOs.Industry
@using Master1Tech.Shared.DTOs.Service
@using Master1Tech.Shared.DTOs.Technology
@using Master1Tech.Shared.Extentions.Common
@using Microsoft.FluentUI.AspNetCore.Components
@inject IServiceServiceEndpoint ServiceService
@inject ITechnologyServiceEndpoint TechnologyService
@inject IIndustryServiceEndpoint IndustryService

<div class="filter-container mb-5">
    <div class="filter-header">
        <div class="filter-controls">
            <FluentButton Appearance="Appearance.Neutral" IconEnd="@(_activeFilterSection == "services" ? new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.ChevronUp() : new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.ChevronDown())" @onclick="@(() => ToggleServicesPanel("services"))">
                @(_companyFilter?.Services?.Count > 0 ? $"Services ({_companyFilter.Services.Count})": "Services")
            </FluentButton>

            <FluentButton Appearance="Appearance.Neutral" IconEnd="@(_activeFilterSection == "tools" ? new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.ChevronUp() : new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.ChevronDown())"  @onclick="@(() => ToggleServicesPanel("tools"))">
                @(_companyFilter?.Technologies?.Count > 0 ? $"Tools & Technologies ({_companyFilter.Technologies.Count})": "Tools & Technologies")
            </FluentButton>

            <FluentButton Appearance="Appearance.Neutral" IconEnd="@(_activeFilterSection == "industry-focus" ? new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.ChevronUp() : new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.ChevronDown())"  @onclick="@(() => ToggleServicesPanel("industry-focus"))">
               @(_companyFilter?.Industries?.Count > 0 ? $"Industry Focus ({_companyFilter.Industries.Count})": "Industry Focus")
            </FluentButton>

            <FluentButton Appearance="Appearance.Neutral" IconEnd="@(_activeFilterSection == "founding-year" ? new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.ChevronUp() : new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.ChevronDown())" @onclick="@(() => ToggleServicesPanel("founding-year"))">
               @(_companyFilter?.Year?.Count > 0 ? $"Founding Year ({_companyFilter.Year.Count})": "Founding Year")
            </FluentButton>

        </div>

        <div class="sort-controls">
            <FluentSelect TOption="SortByDto" Position="SelectPosition.Below" 
                            Label="Sort by:"
                            Items="@SortBies.ToList()"
                            Width="200px"
                            OptionValue="@(p => p.Name)"
                            OptionText="@(p => p.Name)"
                            ValueChanged="@(e => SortByValueChanged(e))">
            </FluentSelect>
            <FluentButton Appearance="Appearance.Outline" @onclick="ClearFilters">
                Clear
            </FluentButton>

            <FluentButton Appearance="Appearance.Accent" @onclick="CloseFilters" BackgroundColor="var(--accent-color)" IconStart="@(_showServices ? new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.FilterDismiss() : new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Filter())">
                @(_showServices ? "Close" : "Filter")
            </FluentButton>
        </div>
    </div>

    @if (_showServices)
{
    <div class="services-panel">
        <div class="sidebar">

            <div class="sidebar-section @(_activeFilterSection == "services" ? "active" : "")"
                 @onclick="@(() => SetActiveFilterSection("services"))">
                <h3>Services</h3>
            </div>

            <div class="sidebar-section @(_activeFilterSection == "tools" ? "active" : "")"
                 @onclick="@(() => SetActiveFilterSection("tools"))">
                <h3>Tools & Technologies</h3>
            </div>

            <div class="sidebar-section @(_activeFilterSection == "industry-focus" ? "active" : "")"
                 @onclick="@(() => SetActiveFilterSection("industry-focus"))">
                <h3>Industry Focus</h3>
            </div>
            <div class="sidebar-section @(_activeFilterSection == "founding-year" ? "active" : "")"
                 @onclick="@(() => SetActiveFilterSection("founding-year"))">
                    <h3>
                        Founding Year
                    </h3>
            </div>

            <FluentButton Appearance="Appearance.Accent" @onclick="ApplyFilters" BackgroundColor="var(--accent-color)">
                Apply Filters
            </FluentButton>
        </div>

        <div class="content">
            @if (_activeFilterSection == "services")
            {
                    if (_services is null)
                    {
                        <div class="spinner-div">
                            <FluentProgressRing></FluentProgressRing>
                        </div>
                    }
                    else
                    {
                        <div class="content-header">
                            <h2>Services</h2>
                            <p>Select the service you are looking for</p>

                            <FluentTextField @bind-Value="_searchText"
                                             Placeholder="Search services"
                                             @oninput="OnSearchInput"
                                             class="search-field">
                                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Search())" Slot="start" />
                            </FluentTextField>
                        </div>

                        <div class="services-content">
                            <div class="service-category">
                                @{
                                    var services = GetFilteredServices(_services);
                                }
                                @foreach (var item in services.OrderBy(x => x.Category).Select(x => x.Category).Distinct())
                                {
                                    <h3>@item</h3>
                                    <div class="service-grid">
                                        @foreach (var service in services.Where(x => x.Category == item).ToList())
                                        {
                                            bool isCehck = _companyFilter.Services?.Contains(service.ServiceID) ?? false;
                                            <FluentCheckbox Label="@service.Name"
                                                            @bind-Value:get="@isCehck"
                                                            @bind-Value:set="se => OnServiceCheckboxValueChanged(service, se)"
                                                            class="service-checkbox" />
                                        }
                                    </div>
                                }
                            </div>
                        </div>

                    }

            }
            else if (_activeFilterSection == "tools")
            {
                    if (_technologies is null )
                {
                    <div class="spinner-div">
                        <FluentProgressRing></FluentProgressRing>
                    </div>
                }
                else
                {
                    <div class="content-header">
                        <h2>Tools & Technologies</h2>
                        <p>Select the technologies you are looking for</p>

                            @*  <div class="display-options">
                                <FluentCheckbox @bind-Value="_onlyDisplayAvailable" Label="Only display available options" />
                                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Info())" />
                            </div>
                            *@
                        <FluentTextField @bind-Value="_toolsSearchText"
                                         Placeholder="Tools & Technologies"
                                         @oninput="OnToolSearchInput"
                                         class="search-field">
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Search())" Slot="start" />
                        </FluentTextField>
                    </div>

                    <div class="services-content">
                        <div class="service-category">
                            @{
                                var technologies = GetFilteredToolsAndTechnologies(_technologies);
                            }
                                @foreach (var item in technologies.OrderBy(x=>x.Category).Select(x=>x.Category).Distinct())
                            {
                                <h3>@item</h3>
                                <div class="service-grid">
                                        @foreach (var technology in technologies.Where(x=>x.Category == item).ToList())
                                    {
                                            bool isCehck = _companyFilter.Technologies?.Contains(technology.TechnologyID) ?? false;
                                        <FluentCheckbox Label="@technology.Name"
                                                            @bind-Value:get="@isCehck"
                                                        @bind-Value:set="se => OnTechnologyCheckboxValueChanged(technology, se)" 
                                                        class="service-checkbox" />
                                    }
                                </div>
                            }
                                
                        </div>
                    </div>
                   
                }
                    
            }
               
            else if (_activeFilterSection == "industry-focus")
            {
                    if (_industries is null )
                {
                    <div class="spinner-div">
                        <FluentProgressRing></FluentProgressRing>
                    </div>
                }
                else
                {
                    <div class="content-header">
                        <h2>Industry Focus</h2>
                        <p>Select the industry you are looking for</p>

                        <FluentTextField @bind-Value="_industrySearchText"
                                         Placeholder="Search Industry"
                                         @oninput="OnIndustrySearchInput"
                                         class="search-field">
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Search())" Slot="start" />
                        </FluentTextField>
                    </div>

                    <div class="services-content">
                        <div class="service-category">
                                @* <h3>Advertising Services</h3> *@
                            <div class="service-grid">
                                @foreach (var industry in GetFilteredIndustryFocus(_industries))
                                {
                                        bool isCehck = _companyFilter.Industries?.Contains(industry.Id) ?? false;
                                    <FluentCheckbox Label="@industry.Name"
                                                        @bind-Value:get="@isCehck"
                                                    @bind-Value:set="se => OnIndustryFocusCheckboxValueChanged(industry, se)" 
                                                    class="service-checkbox" />
                                }
                            </div>
                        </div>
                    </div>
                }
                    

                   
            }
                
            else if (_activeFilterSection == "founding-year")
            {
                <div class="services-content">
                    <div class="service-category">
                        <RangeSlider Title="Founding Year" 
                                     Description="Show companies by Founding year"
                                     Min="Convert.ToInt32(CommonExt.GetFoundedYears().First().Year)" 
                                     Max="Convert.ToInt32(CommonExt.GetFoundedYears().Last().Year)" 
                                     InitialMinValue="_minYear" 
                                     InitialMaxValue="_maxYear"
                                     FromLabel="From " 
                                     ToLabel="To "
                                     OnRangeChanged="OnFoundingYearChanged" />
                    </div>
                </div>

                }

    </div>
        </div>
    }
</div>

@code {

    private bool _showServices = false;
    private bool _onlyDisplayAvailable = true;
    private string _searchText = string.Empty;
    private string _industrySearchText = string.Empty;
    private string _toolsSearchText = string.Empty;
    private string _activeFilterSection = string.Empty;

    [Parameter]
    public EventCallback<CompanyFilter> OnClickFilter { get; set; }

    [Parameter]
    public EventCallback<bool> OnFilterClear { get; set; }

    [Parameter] 
    public EventCallback<bool> OnFilterToggle { get; set; }

    private List<ServiceSummaryDto>? _services = null;
    private List<TechnologySummaryDto>? _technologies = null;
    private List<IndustryDto>? _industries = null;

    private List<FoundedYearDto> _foundedYears = CommonExt.GetFoundedYears();
    private CompanyFilter _companyFilter = new();


    private int _minYear = Convert.ToInt32(CommonExt.GetFoundedYears().First().Year);
    private int _maxYear = Convert.ToInt32(CommonExt.GetFoundedYears().Last().Year);

    SortByDto? SelectedSortBy;

    private List<SortByDto> SortBies = new()
     {        
         new SortByDto() {
             Name = "Name"
         },
         new SortByDto
         {
             Name = "Team Size"
         },
         // new SortByDto()
         // {
         //     Name = "Rating"
         // },

         new SortByDto() {
             Name = "Featured"
         },

     };

    private async Task SetActiveFilterSection(string section)
    {
        _activeFilterSection = section;

        if (section == "services")
        {
            await LoadServices();
        }
        else if (section == "tools")
        {
            // Load tools and technologies if needed
            await LoadToolsAndTechnologies();
        }
        else if (section == "industry-focus")
        {
            // Load industry focus if needed
            await LoadIndustryFocus();
        }
    }


    private async Task ToggleServicesPanel(string activeFilterSection)
    {
        if (_activeFilterSection == activeFilterSection)
        {
            _showServices = !_showServices;
            await OnFilterToggle.InvokeAsync(_showServices);
            await LoadServices();
            return;
        }
        _activeFilterSection = activeFilterSection;
        _showServices = true;

        await OnFilterToggle.InvokeAsync(_showServices);

        StateHasChanged();

        if (activeFilterSection == "services")
        {
            await LoadServices();
        }
        else if (activeFilterSection == "tools")
        {
            // Load tools and technologies if needed
            await LoadToolsAndTechnologies();
        }
        else if (activeFilterSection == "industry-focus")
        {
            // Load industry focus if needed
            await LoadIndustryFocus();
        }

    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        _searchText = e.Value?.ToString() ?? "";
    }

    private void OnToolSearchInput(ChangeEventArgs e)
    {
        _toolsSearchText = e.Value?.ToString() ?? "";
    }
    private void OnIndustrySearchInput(ChangeEventArgs e)
    {
        _industrySearchText = e.Value?.ToString() ?? "";
    }

    private List<ServiceSummaryDto> GetFilteredServices(List<ServiceSummaryDto> services)
    {
        var filtered = services.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(_searchText))
        {
            filtered = filtered.Where(s => s.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase));
        }
        return filtered.ToList();
    }

    private void OnServiceCheckboxValueChanged(ServiceSummaryDto service, bool newValue)
    {
        if (newValue)
        {
            if (_companyFilter.Services is null)
                _companyFilter.Services = new();

            _companyFilter.Services.Add(service.ServiceID);
        }
        else if (_companyFilter.Services is not null)
        {
            _companyFilter.Services.Remove(service.ServiceID);
        }
    }

    private List<TechnologySummaryDto> GetFilteredToolsAndTechnologies(List<TechnologySummaryDto> technologySummaries)
    {
        var filtered = technologySummaries.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(_toolsSearchText))
        {
            filtered = filtered.Where(s => s.Name.Contains(_toolsSearchText, StringComparison.OrdinalIgnoreCase));
        }

        return filtered.ToList();
    }

    private void OnTechnologyCheckboxValueChanged(TechnologySummaryDto technologySummary, bool newValue)
    {
        if (newValue)
        {
            if (_companyFilter.Technologies is null)
                _companyFilter.Technologies = new();

            _companyFilter.Technologies.Add(technologySummary.TechnologyID);
        }
        else if (_companyFilter.Technologies is not null)
        {
            _companyFilter.Technologies.Remove(technologySummary.TechnologyID);
        }
    }

    private List<IndustryDto> GetFilteredIndustryFocus(List<IndustryDto> industries)
    {
        var filtered = industries.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(_industrySearchText))
        {
            filtered = filtered.Where(s => s.Name.Contains(_industrySearchText, StringComparison.OrdinalIgnoreCase));
        }

        return filtered.ToList();
    }

    private void OnIndustryFocusCheckboxValueChanged(IndustryDto industry, bool newValue)
    {
        if (newValue)
        {
            if (_companyFilter.Industries is null)
                _companyFilter.Industries = new();

            _companyFilter.Industries.Add(industry.Id);
        }
        else if (_companyFilter.Industries is not null)
        {
            _companyFilter.Industries.Remove(industry.Id);
        }
    }



    private async Task LoadServices()
    {
        try
        {
            _services = await ServiceService.GetAllServicesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading services: {ex.Message}");
        }
    }
    private async Task LoadToolsAndTechnologies()
    {
        try
        {
            _technologies = await TechnologyService.GetAllTechnologiesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading technologies: {ex.Message}");
        }
    }
    private async Task LoadIndustryFocus()
    {
        try
        {
            _industries = await IndustryService.GetAllIndustryAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading industries: {ex.Message}");
        }
    }


    private async Task ApplyFilters()
    {
        _showServices = false;
        await OnClickFilter.InvokeAsync(_companyFilter); 
        if (_companyFilter.Year?.Count > 1)
        {
            _minYear = Convert.ToInt32(_companyFilter.Year.First());
            _maxYear = Convert.ToInt32(_companyFilter.Year.Last());

        }
    }

    private async Task SortByValueChanged(string values)
    {
        _companyFilter.SortBy = values;
        await OnClickFilter.InvokeAsync(_companyFilter); 
    }

    private async Task CloseFilters()
    {
        _showServices = !_showServices;
        await OnFilterToggle.InvokeAsync(_showServices);
        await SetActiveFilterSection(_activeFilterSection);
    }
    private async Task ClearFilters()
    {
        _companyFilter = new();
        _minYear = Convert.ToInt32(CommonExt.GetFoundedYears().First().Year);
        _maxYear = Convert.ToInt32(CommonExt.GetFoundedYears().Last().Year);
        await OnFilterClear.InvokeAsync(true);
    }

    private void OnFoundingYearChanged((int min, int max) range)
    {
        // Handle the range change
        // Console.WriteLine($"Founding Year: {range.min} - {range.max}");

        _companyFilter.Year = new();
        _companyFilter.Year =  _foundedYears.Where(dto => int.Parse(dto.Year) >= range.min && int.Parse(dto.Year) <= range.max).Select(x=> x.Year).ToList();
     }
} 